from random import randint
from time import sleep
from turtle import Turtle, Screen


# ⫘⫘⫘⫘⫘⫘ The Snake ⫘⫘⫘⫘⫘⫘ #


STARTING_POSITION = [(0, 0), (-20, 0), (-40, 0)]
MOVE_DISTANCE = 20

# ! Define heading constants for clarity - Geimini
UP, DOWN, LEFT, RIGHT = 90, 270, 180, 0


class Snake:

    def __init__(self):
        self.snake_body = []
        self.create_snake()

        # ! Store the head separately for easier access - Gemini
        self.head = self.snake_body[0]

    def create_snake(self):
        # ! This code generated by Gemini.
        for position in STARTING_POSITION:
            self.add_segment(position)
            # segment = t.Turtle()
            # segment.shape("square")
            # segment.color("white")
            # segment.penup()
            # segment.goto(position)  # Posisi awal setiap segmen
            # self.snake_body.append(segment)

    # ══════════ Extending the Snake ══════════ #

    def add_segment(self, position):
        segment = Turtle()
        segment.speed("slowest")
        segment.shape("square")
        segment.color("white")
        segment.penup()
        segment.goto(position)  # Posisi awal setiap segmen
        self.snake_body.append(segment)

    def extend(self):
        self.add_segment(self.snake_body[-1].position())

    def move(self):
        for part in range(len(self.snake_body) - 1, 0, -1):
            the_x = self.snake_body[part - 1].xcor()
            the_y = self.snake_body[part - 1].ycor()
            self.snake_body[part].goto(the_x, the_y)

        self.snake_body[0].forward(MOVE_DISTANCE)

    # ══════════ Direction Control Methods ══════════ #

    # Change self.snake to self.head

    def up(self):
        # Prevent the snake from reversing directly onto itself
        if self.head.heading() != DOWN:
            self.head.setheading(UP)

    def down(self):
        # Prevent the snake from reversing directly onto itself
        if self.head.heading() != UP:
            self.head.setheading(DOWN)

    def left(self):
        # Prevent the snake from reversing directly onto itself
        if self.head.heading() != RIGHT:
            self.head.setheading(LEFT)

    def right(self):
        # Prevent the snake from reversing directly onto itself
        if self.head.heading() != LEFT:
            self.head.setheading(RIGHT)


# ⫘⫘⫘⫘⫘⫘ The Foods ⫘⫘⫘⫘⫘⫘ #


class Food(Turtle):

    def __init__(self):
        super().__init__()
        self.shape("turtle")
        self.penup()
        self.shapesize(stretch_len=0.5, stretch_wid=0.5)
        self.color("green")
        self.speed("fastest")
        self.change_position()

    def change_position(self):
        random_x = randint(a=-280, b=280)
        random_y = randint(a=-280, b=280)
        self.goto(random_x, random_y)


# ⫘⫘⫘⫘⫘⫘ The Scoreboard ⫘⫘⫘⫘⫘⫘ #


class Scoreboard(Turtle):

    def __init__(self):
        super().__init__()
        self.score = 0
        self.penup()
        self.hideturtle()
        self.speed("fastest")
        self.color("white")
        self.goto(x=0, y=260)
        self.update_score()

    def update_score(self):
        self.write(
            arg=f"Score: {self.score}",
            move=False, align="center",
            font=("Courier", 24, "normal"))

    def game_over(self):
        self.color("red")
        self.goto(x=0, y=0)
        self.write(
            arg="GAME OVER",
            move=False,
            align="center",
            font=("Courier", 24, "normal"))

    def add_score(self):
        self.score += 1
        self.clear()
        self.update_score()


# ═══════════════ Main Units ═══════════════ #


screen = Screen()
screen.setup(width=600, height=600)
screen.bgcolor("black")
screen.title("Udemy Snake Game")
screen.tracer(False)

snake = Snake()
food = Food()
score = Scoreboard()

screen.listen()
screen.onkey(snake.up, 'Up')
screen.onkey(snake.down, 'Down')
screen.onkey(snake.left, 'Left')
screen.onkey(snake.right, 'Right')

while True:
    screen.update()
    sleep(0.1)
    snake.move()

    # ══════════ Detect collision with food ══════════ #

    if snake.head.distance(food) < 15:
        food.change_position()
        snake.extend()
        score.add_score()

    # ══════════ Detect collision with wall ══════════ #

    elif (
        snake.head.xcor() > 280 or
        snake.head.xcor() < -280 or
        snake.head.ycor() > 280 or
        snake.head.ycor() < -280
    ):
        print("Error! - You Dead")
        score.game_over()
        break

    # ══════════ Detect collision with tail ══════════ #

    for segment in snake.snake_body[1:]:
        # if segment == snake.head:
        #     pass
        if snake.head.distance(segment) < 10:
            score.game_over()
            quit()
            break

screen.mainloop()
