import turtle as t

STARTING_POSITION = [(0, 0), (-20, 0), (-40, 0), (-60, 0), (-80, 0), (-100, 0)]
MOVE_DISTANCE = 20

# ! Define heading constants for clarity - Geimini
UP, DOWN, LEFT, RIGHT = 90, 270, 180, 0

# TODO 3: Create The Snake Class.
class Snake:

    def __init__(self):
        self.snake_body = []
        self.create_snake()

        # ! Store the head separately for easier access - Gemini
        self.head = self.snake_body[0]

    def create_snake(self):
        # ! This code generated by Gemini.
        for position in STARTING_POSITION:
            segment = t.Turtle()
            segment.shape("square")
            segment.color("white")
            segment.penup()
            segment.goto(position)  # Posisi awal setiap segmen
            self.snake_body.append(segment)

    def move(self):
        for part in range(len(self.snake_body) - 1, 0, -1):
            the_x = self.snake_body[part - 1].xcor()
            the_y = self.snake_body[part - 1].ycor()
            self.snake_body[part].goto(the_x, the_y)

        self.snake_body[0].forward(MOVE_DISTANCE)


    # ══════════ Direction Control Methods ══════════ #
    # Change self.snake to self.head

    def up(self):
        # Prevent the snake from reversing directly onto itself
        if self.head.heading() != DOWN:
            self.head.setheading(UP)

    def down(self):
        # Prevent the snake from reversing directly onto itself
        if self.head.heading() != UP:
            self.head.setheading(DOWN)

    def left(self):
        # Prevent the snake from reversing directly onto itself
        if self.head.heading() != RIGHT:
            self.head.setheading(LEFT)

    def right(self):
        # Prevent the snake from reversing directly onto itself
        if self.head.heading() != LEFT:
            self.head.setheading(RIGHT)
